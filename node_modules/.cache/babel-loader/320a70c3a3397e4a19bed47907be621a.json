{"ast":null,"code":"var _jsxFileName = \"/Users/katsiarynabulauskaya/Sites/Maksim/lessons/Les2/it-kamasutra2020-main/src/components/Login/LoginContainerFormik.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { login } from '../../redux/auth-reducer';\nimport { Redirect } from 'react-router-dom';\n\nclass LoginContainer extends React.Component {\n  componentDidMount() {}\n\n  render() {\n    if (this.props.isAuth) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/profile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(LoginForm, {\n      login: this.props.login,\n      logout: this.props.logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    isAuth: state.auth.isAuth\n  };\n};\n\nconst LoginForm = props => {\n  const validateForm = values => {\n    const errors = {};\n\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n\n    if (!values.password) {\n      errors.password = 'Required Password';\n    } else if (values.password.length <= 6) {\n      errors.password = 'password length should bee more than 6 charaters';\n    } // if (!values.rememberMe) {\n    //     errors.rememberMe = 'Required';\n    // }\n\n\n    return errors;\n  };\n\n  const submitForm = (values, {\n    setSubmitting,\n    setErrors,\n    setStatus\n  }) => {\n    props.login(values.email, values.password, values.rememberMe, setSubmitting, setErrors, setStatus);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    validate: validateForm,\n    onSubmit: submitForm,\n    initialStatus: {\n      msg: \"status initial general error\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, ({\n    isSubmitting,\n    errors,\n    status\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }\n  }, status ? status.msg : ''), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, \"Email\", /*#__PURE__*/React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    disabled: isSubmitting,\n    placeholder: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }, msg => /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 42\n    }\n  }, msg)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    disabled: isSubmitting,\n    placeholder: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }, msg => /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 42\n    }\n  }, msg))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"rememberMe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }, \"Remember me\", /*#__PURE__*/React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"rememberMe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: \"rememberMe\",\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default connect(mapStateToProps, {\n  login\n})(LoginContainer);","map":{"version":3,"sources":["/Users/katsiarynabulauskaya/Sites/Maksim/lessons/Les2/it-kamasutra2020-main/src/components/Login/LoginContainerFormik.jsx"],"names":["React","connect","Formik","Form","Field","ErrorMessage","login","Redirect","LoginContainer","Component","componentDidMount","render","props","isAuth","logout","mapStateToProps","state","auth","LoginForm","validateForm","values","errors","email","test","password","length","submitForm","setSubmitting","setErrors","setStatus","rememberMe","confirmPassword","msg","isSubmitting","status","color"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport {login} from '../../redux/auth-reducer';\nimport { Redirect } from 'react-router-dom';\n\n\nclass LoginContainer extends React.Component {\n\n    componentDidMount() {\n\n\n    }\n\n    render() {\n        if(this.props.isAuth){\n            return <Redirect to={\"/profile\"}></Redirect>;\n        }\n        return (\n\n            <div>\n                <h2>Login</h2>\n                <LoginForm login={this.props.login} logout={this.props.logout}></LoginForm>\n\n\n            </div>\n        );\n    }\n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth:state.auth.isAuth\n\n\n    };\n}\n\n\nconst LoginForm = (props) => {\n\n    const validateForm = (values) => {\n       \n        const errors = {};\n        if (!values.email) {\n            errors.email = 'Required';\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = 'Invalid email address';\n        }\n\n        if (!values.password) {\n            errors.password = 'Required Password';\n        }else if(values.password.length <= 6){\n            errors.password = 'password length should bee more than 6 charaters';\n        }\n        // if (!values.rememberMe) {\n        //     errors.rememberMe = 'Required';\n        // }\n\n        return errors;\n    };\n\n    const submitForm = (values, { setSubmitting ,setErrors,setStatus}) => {\n     \n        props.login(values.email,values.password,values.rememberMe,setSubmitting,setErrors,setStatus);\n       \n    };\n\n    return (\n        <div>\n            <Formik\n                initialValues={{ email: '', password: '',confirmPassword:'' }}\n                validate={validateForm}\n                onSubmit={submitForm}\n                initialStatus={{msg:\"status initial general error\",}}\n            >\n                {({ isSubmitting ,errors,status}) => (\n                    <Form>\n                        <div>\n                            <div style={{ color: 'red' }}>\n                                {status ? status.msg :'' }\n                            </div>\n                           \n                            <label htmlFor=\"email\">Email\n                            <Field type=\"email\" name=\"email\" disabled={isSubmitting} placeholder=\"email\" />\n                           \n                            <ErrorMessage name=\"email\">\n                                { msg => <div style={{ color: 'red' }}>{msg}</div> }\n                            </ErrorMessage>\n                            </label>\n                        </div>\n                        <div>\n                            <label htmlFor=\"password\">Password</label>\n                            <Field type=\"password\" name=\"password\" disabled={isSubmitting} placeholder=\"password\" />\n                          \n                            <ErrorMessage name=\"password\">\n                                { msg => <div style={{ color: 'red' }}>{msg}</div> }\n                           \n                            </ErrorMessage>\n                          \n                        </div>\n                       \n                        <div>\n                            <label htmlFor=\"rememberMe\">Remember me\n                            <Field type=\"checkbox\" name=\"rememberMe\" />\n                            </label>\n                            <ErrorMessage name=\"rememberMe\" component=\"div\" />\n                        </div>\n                        <div>\n                            <button type=\"submit\" disabled={isSubmitting}>\n                                Submit\n                            </button>\n\n                        </div>\n                        <div>\n                       \n                        </div>\n                      \n                       \n                       \n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n}\n\n\n\nexport default connect(mapStateToProps, {login})(LoginContainer);"]},"metadata":{},"sourceType":"module"}